"""
Temporary tables have a _ prefix
columns generated by CVL have a cvl_ prefix
framework functions have a CVL_ prefix
"""
__author__ = 'kostas'

# BASIC TRANSACTION

BEGIN_TX = \
    """
    BEGIN;
    """

COMMIT_TX = \
    """
    COMMIT;
    """

# INIT


DROP_OUTPUT_TABLE = \
    """
    DROP TABLE IF EXISTS {output};
    """

CREATE_OUTPUT_TABLE_AND_INDEX = \
    """
    CREATE TABLE {output} AS
    SELECT
      {fid}::bigint as cvl_id, {geometry}, {other}
      {rank_by}::float AS cvl_rank,
      0 as cvl_zoom
    FROM
      {input};

    CREATE INDEX {output}_idandrank ON {output} (cvl_id, cvl_rank);
    ALTER TABLE {output} ADD CONSTRAINT {output}_pk PRIMARY KEY (cvl_id);
    --CREATE INDEX {output}_zidx ON {output} (cvl_zoom);
    CREATE INDEX {output}_geom_idx ON {output} USING GIST({geometry});
    """

# CVL

# Stage commands

CREATE_TEMPORARY = \
    """
    CREATE TEMPORARY TABLE _conflicts (conflict_id text, cvl_id bigint, cvl_rank float, min_hits integer);
    CREATE TEMPORARY TABLE _deletions (cvl_id bigint);
    CREATE TEMPORARY VIEW _level_view AS SELECT * FROM {output} WHERE cvl_zoom = 0;
    """

FIND_CONFLICTS = \
    """
    INSERT INTO _conflicts
    SELECT
        conflicts.conflict_id,
        conflicts.cvl_id,
        level.cvl_rank,
        ({resolve_if_delete}) as min_hits
    FROM ({constraint_select}) conflicts
    JOIN _level_view level
    ON conflicts.cvl_id = level.cvl_id;
    """

SOLVE = \
    """
    INSERT INTO _deletions
    SELECT sol.* FROM ({solution}) sol;
    """

DO_DELETIONS = \
    """
    UPDATE {output}
    SET cvl_zoom = {z} + 1
    WHERE cvl_id IN (SELECT cvl_id FROM _deletions);
    """

DROP_TEMPORARY = \
    """
    DROP TABLE _conflicts;
    DROP TABLE _deletions;
    DROP VIEW _level_view;
    """

# COMMENTS

COMMENT = "-- {comment}"

ANALYZE = \
    r"""
    ANALYZE {output};
    """
